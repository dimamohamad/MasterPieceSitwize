@model MasterPiece.Models.User

@{
    ViewBag.Title = "Register";
}


<style>
    .form-container {
        background-color: #fff;
        border-radius: 10px;
        max-width: 500px;
        margin: 0 auto;
    }

        .form-container h2 {
            margin-bottom: 1rem;
        }

        .form-container p {
            margin-bottom: 1rem;
        }

        .form-container .form-check-label {
            margin-left: 0.25rem;
        }

    .btn-continue {
        background-color: #99005C;
        border: none;
        color: #fff;
        height: 50px;
        border-radius: 10px;
        margin-left: 185px;
    }


        .btn-continue:hover {
            background-color: #99005C;
        }

    .safety-center {
        background-color: #e9ecef;
        border-radius: 5px;
    }

    a {
        color: #103741;
        text-decoration: none;
        background-color: transparent;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: .375rem .75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #74787C;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        appearance: none;
        border-radius: 10px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        margin: 7px;
    }
</style>
<main>
    <!-- Form -->
    <div class="container mt-5">
        <div class="form-container p-4 shadow">
            <h2 class="text-center">Welcome, parents</h2>
            <p class="text-center">Already have an account? <a href="@Url.Action("Login", "Account")">LOG IN</a></p>
            @using (Html.BeginForm("Register", "Account", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "First Name" })
                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Last Name" })
                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email", type = "email" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.PasswordFor(m => m.PasswordHash, new { @class = "form-control", placeholder = "Password", id = "form3ExamplePassword", onkeyup = "checkPasswordStrength()" })
                    @*@Html.ValidationMessageFor(m => m.PasswordHash, "", new { @class = "text-danger" })*@
                    <div id="password-strength" class="text-danger mb-4" style="display:none;"></div>

                </div>
                <div id="passwordRequirements" class="text-danger" style="display:none;">
                    <ul>
                        <li id="lengthReq">At least 8 characters</li>
                        <li id="uppercaseReq">At least one uppercase letter</li>
                        <li id="specialReq">At least one special character</li>
                    </ul>
                </div>

                @*<div class="form-group">
                        <label for="confirmPassword">Confirm Password</label>
                        <input type="password" id="confirmPassword" class="form-control" name="confirmPassword" />
                        <span id="confirmPasswordError" class="text-danger"></span>
                    </div>*@
                <div class="form-group">
                    <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" placeholder="Confirm Password" />
                    <span asp-validation-for="confirmPassword" class="text-danger"></span>
                </div>



                @*<div class="form-check mb-3">
                        <input type="checkbox" class="form-check-input" id="termsCheck" required>
                        <label class="form-check-label" for="termsCheck">I agree to the Terms of Use.</label>
                    </div>*@
                <button type="submit" class="btn btn-block btn-continue">SIGN UP</button>
            }
            @*<p class="text-center mt-3">Already have an Email <a href="@Url.Action("Login", "Account")">LOGIN</a></p>*@
            @*<div class="safety-center p-3 mt-3">
                    <p class="text-center">
                        All users are encouraged to visit our <a href="#">Trust & Safety Center</a>
                        to learn more about our commitment to keeping you safe.
                    </p>
                </div>*@
        </div>
    </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@*@if (TempData["RegistrationSuccess"] != null)
    {
        <script>
                Swal.fire({
                    icon: 'success',
                    title: 'Registered Successfully!',
                    text: '@TempData["RegistrationSuccess"]'
                });
        </script>}*@



@if (TempData["RegistrationSuccess"] != null && (bool)TempData["RegistrationSuccess"])
{
    <script>
        Swal.fire({
            icon: 'success',
            title: 'Registered Successfully!',
            text: 'You are registered successfully. You will be redirected to the login page in a few seconds.',
            timer: 3000, // Delay for 3 seconds
            showConfirmButton: true
        }).then(() => {
            window.location.href = '@Url.Action("Login", "Account")'; // Redirect to the login page
        });
    </script>
}

@if ((bool?)ViewBag.ShowPasswordMismatchAlert == true)
{
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Passwords do not match!'
        });
    </script>
}

@if ((bool?)ViewBag.ShowEmailExistsAlert == true)
{
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Email Already Exists',
            text: 'The email address you entered is already registered. Please use a different email or log in.'
        });
    </script>
}
@*<script>
        function checkPasswordStrength() {
            const password = document.getElementById('form3ExamplePassword').value;
            const upperCase = /[A-Z]/.test(password);
            const specialChar = /[!@@#$%^&*(),.?":{}|<>]/.test(password);
            const strengthMessage = document.getElementById('password-strength');
            let message = "";

            if (password.length < 8) {
                message = "Password must be at least 8 characters long.";
            } else if (!upperCase) {
                message = "Password must contain at least one uppercase letter.";
            } else if (!specialChar) {
                message = "Password must contain at least one special character.";
            } else {
                message = "Password is strong.";
                strengthMessage.classList.remove('text-danger');
                strengthMessage.classList.add('text-success');
            }

            strengthMessage.textContent = message;
            if (message !== "Password is strong.") {
                strengthMessage.classList.remove('text-success');
                strengthMessage.classList.add('text-danger');
            }
        }
    </script>*@

<script>
    function checkPasswordStrength() {
        const password = document.getElementById('form3ExamplePassword').value;
        const upperCase = /[A-Z]/.test(password);
        const specialChar = /[!@@#$%^&*(),.?":{}|<>]/.test(password);
        const strengthMessage = document.getElementById('password-strength');
        const lengthReq = document.getElementById('lengthReq');
        const uppercaseReq = document.getElementById('uppercaseReq');
        const specialReq = document.getElementById('specialReq');

        // Display the requirements and strength message only if the user starts typing
        const passwordRequirements = document.getElementById('passwordRequirements');
        if (password.length > 0) {
            passwordRequirements.style.display = 'block';
            strengthMessage.style.display = 'block';
        } else {
            passwordRequirements.style.display = 'none';
            strengthMessage.style.display = 'none';
        }

        // Reset the requirements visibility
        lengthReq.style.color = 'red';
        uppercaseReq.style.color = 'red';
        specialReq.style.color = 'red';

        let message = "";

        // Check for password strength
        if (password.length >= 8) {
            lengthReq.style.color = 'green';
        }
        if (upperCase) {
            uppercaseReq.style.color = 'green';
        }
        if (specialChar) {
            specialReq.style.color = 'green';
        }

        // Update message and class based on password strength
        if (password.length < 8) {
            message = "Password must be at least 8 characters long.";
        } else if (!upperCase) {
            message = "Password must contain at least one uppercase letter.";
        } else if (!specialChar) {
            message = "Password must contain at least one special character.";
        } else {
            message = "Password is strong.";
            strengthMessage.classList.remove('text-danger');
            strengthMessage.classList.add('text-success');
        }

        strengthMessage.textContent = message;

        // If the password isn't strong, show the warning message
        if (message !== "Password is strong.") {
            strengthMessage.classList.remove('text-success');
            strengthMessage.classList.add('text-danger');
        }
    }
</script>


}